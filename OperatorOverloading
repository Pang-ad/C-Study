加号运算符重载
1、成员函数重载+
class Person
{
public:
  int m_A;
  int m_B;
  
  Person operator+(Person &p)
  {
    Person temp;
    temp.m_A = this->m_A + p.m_A;
    temp.m_B = this->m_B + p.m_B;
    return temp;
  }
};
2、全局函数重载+
Person operator+(Person &p1,Person &p2)
{
  Person temp;
  temp.m_A = p1.m_A+p2.m_A;
  temp.m_B = p1.m_B+p2.m_B;
  return temp;
}

左移运算符重载
class Person
{
public:
  int m_A;
  int m_B;
  
  //不利用成员函数实现左移重载
};
//全局函数重载
ostream& operator<<(ostream &cout,Person &p)
{
  cout<<"p.m_A = "p.m_A<<"p.m_B = "<<p.m_B;
  return cout;
}

递增运算符重载
class MyInteger
{
  public:
    MyInteger(){m_Num=0;}
    
    //成员函数重载前置递增
    MyInteger& opeartor++() //返回引用为了一直对一个数据进行递增操作
    {
      m_Num++;
      return *this;
    }
    
    //成员函数重载后置递增
    MyInteger operator++(int)   //int 代表占位参数，区分前置递增和后置递增
    {
      MyInteger temp=*this;
      m_Num++;
      return temp;
    }
    int m_Num;
}

赋值运算符重载
class Person
{
public:
  Person(int age)
  {
    m_Age = new int(age);
  }
  ~Person()
  {
    if(m_Age != NULL)
    {
      delete m_Age;
      m_Age = NULL;
    }
  }
  
  //成员函数重载赋值运算符
  Person& operator=(Person &p)
  {
    if(m_Age != NULL)
    {
      delete m_Age;
      m_Age = NULL;
    }
    
    m_Age = new int(*(p.m_Age));
    
    return *this;
  }
  
  int* m_Age;
};

关系运算符重载
class Person
{
public:
  Person(string name,int age)
  {
    m_name = name;
    m_age = age;
  }
  
  bool operator==(Person &p)
  {
    if(this->m_name == p.m_name && this->m_age == p.m_age)
      return true;
    return false;
  }
  
  string m_name;
  int m_age;
}














